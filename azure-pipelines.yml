# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - '*'

stages:
- ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
  - stage: Analysis
    dependsOn: []
    jobs:
    - job:
      displayName: "Semgrep"
      continueOnError: false
      pool:
        vmImage: ubuntu-latest
      steps:
      - script: |
          set -ex
          target_branch=origin/$(System.PullRequest.TargetBranch)
          files_changed=$(git --no-pager diff $target_branch..HEAD --name-only --diff-filter=d)
          python -m pip install --upgrade pip
          pip install semgrep
          semgrep --config "p/default" --error $files_changed
        displayName: 'Run Semgrep'

- stage: Build
  jobs:
  - job:
    displayName: "build"
    timeoutInMinutes: 60

    pool:
      vmImage: 'ubuntu-20.04'

    variables:
      DIFF_COVER_CHECK_THRESHOLD: 70
      DIFF_COVER_ENABLE: 'true'
      DIFF_COVER_WORKING_DIRECTORY: $(System.DefaultWorkingDirectory)

    container:
      image: sonicdev-microsoft.azurecr.io:443/sonic-slave-buster:latest

    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        source: specific
        project: build
        pipeline: 1
        artifact: sonic-buildimage.vs
        runVersion: 'latestFromBranch'
        runBranch: 'refs/heads/master'
      displayName: "Download artifacts from latest sonic-buildimage build"

    - script: |
        set -xe
        sudo apt-get -y purge libhiredis-dev libnl-3-dev libnl-route-3-dev
        sudo dpkg -i libnl-3-200_*.deb
        sudo dpkg -i libnl-genl-3-200_*.deb
        sudo dpkg -i libnl-route-3-200_*.deb
        sudo dpkg -i libnl-nf-3-200_*.deb
        sudo dpkg -i libhiredis0.14_*.deb
        sudo dpkg -i libyang_1.*.deb
        sudo dpkg -i libswsscommon_1.0.0_amd64.deb
        sudo dpkg -i python3-swsscommon_1.0.0_amd64.deb
      workingDirectory: $(Pipeline.Workspace)/target/debs/buster/
      displayName: 'Install Debian dependencies'

    - script: |
        set -xe
        sudo pip3 install swsssdk-2.0.1-py3-none-any.whl
        sudo pip3 install sonic_py_common-1.0-py3-none-any.whl
      workingDirectory: $(Pipeline.Workspace)/target/python-wheels/buster/
      displayName: 'Install Python dependencies'

    - script: |
        set -ex
        # Install .NET CORE
        curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        sudo apt-add-repository https://packages.microsoft.com/debian/10/prod
        sudo apt-get update
        sudo apt-get install -y dotnet-sdk-5.0
      displayName: "Install .NET CORE"


    # Python 3
    - script: |
        python3 setup.py test
      displayName: 'Test Python 3'

    - task: PublishTestResults@1
      inputs:
        testResultsFiles: '$(System.DefaultWorkingDirectory)/test-results.xml'
        testRunTitle: Python 3
        failTaskOnFailedTests: true
      condition: succeededOrFailed()
      displayName: 'Publish Python 3 test results'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/htmlcov/'
      displayName: 'Publish Python 3 test coverage'

    - script: |
        set -e
        python3 setup.py bdist_wheel
      displayName: 'Build Python 3 wheel'

    - publish: '$(System.DefaultWorkingDirectory)/dist/'
      artifact: wheels
      displayName: "Publish Python wheels"
